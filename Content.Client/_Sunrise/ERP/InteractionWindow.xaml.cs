// © SUNRISE, An EULA/CLA with a hosting restriction, full text: https://github.com/space-sunrise/lust-station/blob/master/CLA.txt
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.AutoGenerated;
using Content.Shared._Sunrise.ERP;
using Robust.Client.GameObjects;
using Content.Shared.Humanoid;
using Robust.Client.UserInterface.Controls;
using Content.Shared.IdentityManagement;
using Robust.Client.Player;
using Robust.Shared.Prototypes;
using Robust.Client.Graphics;
using Robust.Shared.Timing;
using System.Linq;
using Content.Shared.Hands.Components;
namespace Content.Client._Sunrise.ERP;

[GenerateTypedNameReferences]
public sealed partial class InteractionWindow : DefaultWindow
{
    private readonly SpriteSystem _spriteSystem;
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    public NetEntity? TargetEntityId { get; set; }
    public Sex? UserSex { get; set; }
    public Sex? TargetSex { get; set; }
    public bool UserHasClothing { get; set; }
    public bool TargetHasClothing { get; set; }
    public bool Erp { get; set; }
    public ProgressBar LoveBar;
    public TimeSpan TimeUntilAllow = TimeSpan.Zero;
    private readonly InteractionEui _eui;
    public TimeSpan UntilUpdate = TimeSpan.Zero;
    public InteractionWindow(InteractionEui eui)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _spriteSystem = _entManager.System<SpriteSystem>();
        _eui = eui;
        LoveBar = ProgressBar;
        SearchBar.OnTextChanged += SearchBarOnOnTextChanged;
        ProgressBar.ForegroundStyleBoxOverride = new StyleBoxFlat(backgroundColor: Color.Pink);
    }

    private void SearchBarOnOnTextChanged(LineEdit.LineEditEventArgs obj)
    {
        PopulateByFilter(SearchBar.Text);
    }

    private void PopulateByFilter(string filter)
    {
        ItemInteractions.Clear();
        if (!_player.LocalEntity.HasValue) return;
        if (!TargetEntityId.HasValue) return;
        var uid = _player.LocalEntity.Value;
        foreach (var proto in _prototypeManager.EnumeratePrototypes<InteractionPrototype>())
        {
            if(proto.InhandObject != string.Empty)
            {
                if (_entManager.TryGetComponent<HandsComponent>(uid, out var hands))
                {
                    if (hands.ActiveHand == null) continue;
                    if (hands.ActiveHand.Container == null) continue;
                    if (!hands.ActiveHand.Container.ContainedEntity.HasValue) continue;
                    if (!_entManager.TryGetComponent<MetaDataComponent>(hands.ActiveHand.Container.ContainedEntity.Value, out var meta)) continue;
                    if (meta.EntityPrototype == null) continue;
                    if (meta.EntityPrototype.ID != proto.InhandObject) continue;
                }
                else continue;
            }
            if (proto.Erp) continue;
            if (_entManager.GetEntity(TargetEntityId.Value) == _player.LocalEntity.Value && !proto.UseSelf) continue;
            if (string.IsNullOrEmpty(filter) ||
                proto.Name.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
            {
                var texture = _spriteSystem.Frame0(proto.Icon);
                if (UserHasClothing && proto.UserWithoutCloth) continue;
                if (TargetHasClothing && proto.TargetWithoutCloth) continue;
                if (UserSex != proto.UserSex && proto.UserSex != Sex.Unsexed) continue;
                if (TargetSex != proto.TargetSex && proto.TargetSex != Sex.Unsexed) continue;
                if (!Erp && proto.Erp) continue;
                ItemInteractions.AddItem(proto.Name, texture, metadata: proto);
            }
        }
        foreach (var proto in _prototypeManager.EnumeratePrototypes<InteractionPrototype>())
        {
            if (proto.InhandObject != string.Empty)
            {
                if (_entManager.TryGetComponent<HandsComponent>(uid, out var hands))
                {
                    if (hands.ActiveHand == null) continue;
                    if (hands.ActiveHand.Container == null) continue;
                    if (!hands.ActiveHand.Container.ContainedEntity.HasValue) continue;
                    if (!_entManager.TryGetComponent<MetaDataComponent>(hands.ActiveHand.Container.ContainedEntity.Value, out var meta)) continue;
                    if (meta.EntityPrototype == null) continue;
                    if (meta.EntityPrototype.ID != proto.InhandObject) continue;
                }
                else continue;
            }
            if (!proto.Erp) continue;
            if (_entManager.GetEntity(TargetEntityId.Value) == _player.LocalEntity.Value && !proto.UseSelf) continue;
            if (string.IsNullOrEmpty(filter) ||
                proto.Name.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
            {
                var texture = _spriteSystem.Frame0(proto.Icon);
                if (UserHasClothing && proto.UserWithoutCloth) continue;
                if (TargetHasClothing && proto.TargetWithoutCloth) continue;
                if (UserSex != proto.UserSex && proto.UserSex != Sex.Unsexed) continue;
                if (TargetSex != proto.TargetSex && proto.TargetSex != Sex.Unsexed) continue;
                if (!Erp && proto.Erp) continue;
                ItemInteractions.AddItem(proto.Name, texture, metadata: proto);
            }
        }
    }
    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if(_gameTiming.CurTime > UntilUpdate)
        {
            UntilUpdate = _gameTiming.CurTime + TimeSpan.FromSeconds(5);
            _eui.RequestState();
        }
        _eui.RequestLove();
    }


    public void Populate()
    {
        var prototypes = _prototypeManager.EnumeratePrototypes<InteractionPrototype>().ToList();
        ItemInteractions.Clear();
        UserDescription.DisposeAllChildren();
        TargetDescription.DisposeAllChildren();
        //Проверки nullable-типов
        if (!TargetEntityId.HasValue) return;
        if (!UserSex.HasValue) return;
        if (!TargetSex.HasValue) return;
        if (!_player.LocalEntity.HasValue) return;

        //Аминь
        if (Erp)
        {
            //Юзер
            UserDescription.AddChild(new Label { Text = "Вы..." });
            if (UserHasClothing) UserDescription.AddChild(new Label { Text = "...Обладаете одеждой" });
            else UserDescription.AddChild(new Label { Text = "...Не обладаете одеждой" });
            UserDescription.AddChild(new Label { Text = "...Обладаете анусом" });
            if (UserSex.Value == Sex.Male) UserDescription.AddChild(new Label { Text = "...Обладаете пенисом" });
            if (UserSex.Value == Sex.Female) UserDescription.AddChild(new Label { Text = "...Обладаете вагиной" });
            if (UserSex.Value == Sex.Female) UserDescription.AddChild(new Label { Text = "...Обладаете грудью" });
            //Таргет
            if (_entManager.GetEntity(TargetEntityId.Value) != _player.LocalEntity.Value)
            {
                TargetDescription.AddChild(new Label { Text = Identity.Name(_eui._entManager.GetEntity(TargetEntityId.Value), _eui._entManager, _player.LocalEntity.Value) + "..." });
                if (TargetHasClothing) TargetDescription.AddChild(new Label { Text = "...Обладает одеждой" });
                else
                {
                    TargetDescription.AddChild(new Label { Text = "...Не обладает одеждой" });
                    TargetDescription.AddChild(new Label { Text = "...Обладает анусом" });
                    if (TargetSex.Value == Sex.Male) TargetDescription.AddChild(new Label { Text = "...Обладает пенисом" });
                    if (TargetSex.Value == Sex.Female) TargetDescription.AddChild(new Label { Text = "...Обладает вагиной" });
                }
                if (TargetSex.Value == Sex.Female) TargetDescription.AddChild(new Label { Text = "...Обладает грудью" });
            }

        }
        else
        {
            ErpProgress.Dispose();
        }
        //Сделать адекватнее бы
        PopulateByFilter(SearchBar.Text);
        ItemInteractions.OnItemSelected += _eui.OnItemSelect;
    }
}
